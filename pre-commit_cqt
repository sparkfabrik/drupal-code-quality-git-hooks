#!/usr/bin/php
<?php

require __DIR__ . '/../../vendor/autoload.php';

use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Output\OutputInterface;
use Symfony\Component\Process\ProcessBuilder;
use Symfony\Component\Console\Application;

class CodeQualityTool extends Application
{
    private $output;
    private $input;
    private $ignoredFiles = array();

    // Standard files extensions.
    private $file_exts =array(
      'engine',
      'php',
      'module',
      'inc',
      'install',
      'profile',
      'test',
      'theme',
      'txt',
    );

    public function __construct()
    {
        parent::__construct('Sparkfabrik Code Quality Tool', '1.0.0');
        $this->getIgnoredFiles();
    }

    private function getIgnoredFiles() {
      $rootPath = realpath(__DIR__ . '/../../');
      // Building an array of ignored files and folders.
      $file_path = $rootPath . '/' . '.dcq_ignore';
      $ignore = array();
      if (file_exists($file_path)) {
        $file = fopen($file_path, "r");
        if ($file) {
          while (!feof($file)) {
            $this->ignoredFiles[] = trim(fgets($file));
          }
        }
      }
    }

    public function doRun(InputInterface $input, OutputInterface $output)
    {
        $this->input = $input;
        $this->output = $output;
        $files = $this->extractCommitedFiles();
        if (count($files) === 1) {
          return;
        }
        $output->writeln('<info>Twinbit - Drupal quality assurance toolchain</info>');
        $output->writeln('<comment>Running PHPLint</comment>');
        if (!$this->phpLint($files)) {
            throw new Exception('There are some PHP syntax errors!');
        }

        $output->writeln('<comment>Checking code style with PHPCS</comment>');
        if (!$this->codeStyleDrupal($files)) {
            throw new Exception(sprintf('There are PHPCS coding standards violations!'));
        }
        #$output->writeln('<comment>Checking code mess with PHPMD</comment>');
        #if (!$this->phPmd($files)) {
        #    throw new Exception(sprintf('There are PHPMD violations!'));
        #}
    }

    private function extractCommitedFiles()
    {
        $output = array();
        $rc = 0;
        exec('git rev-parse --verify HEAD 2> /dev/null', $output, $rc);

        $against = '4b825dc642cb6eb9a060e54bf8d69288fbee4904';
        if ($rc == 0) {
            $against = 'HEAD';
        }

        exec("git diff-index --cached --name-status $against | egrep '^(A|M)' | awk '{print $2;}'", $output);
        foreach ($output as $key => $file) {
          if (file_exists($file) && !is_dir($file)) {
            if (in_array($file, $this->ignoredFiles)) {
              unset($output[$key]);
            }
          }
        }
        return $output;
    }

    private function phpLint($files)
    {
        $succeed = true;
        foreach ($files as $file) {
            $pathinfo = pathinfo($file);
            if (!isset($pathinfo['extension'])) {
                continue;
            }
            // Exclude features auto-generated files.
            if (strpos($pathinfo['filename'], '.features.') !== FALSE) {
              continue;
            }
            if (!in_array($pathinfo['extension'], $this->file_exts)) {
              continue;
            }
            $processBuilder = new ProcessBuilder(array('php', '-l', $file));
            $process = $processBuilder->getProcess();
            $process->run();

            if (!$process->isSuccessful()) {
                $this->output->writeln($file);
                $this->output->writeln(sprintf('<error>%s</error>', trim($process->getErrorOutput())));

                if ($succeed) {
                    $succeed = false;
                }
            }
        }

        return $succeed;
    }

    private function phPmd($files, $rules = 'unusedcode,design,naming')
    {
        $needle = $this->file_exts;
        $succeed = true;
        $rootPath = realpath(__DIR__ . '/../../');

        foreach ($files as $file) {
            $pathinfo = pathinfo($file);
            if (!isset($pathinfo['extension'])) {
                continue;
            }
            // Exclude features auto-generated files.
            if (strpos($pathinfo['filename'], '.features.') !== FALSE) {
              continue;
            }
            if (!in_array($pathinfo['extension'], $this->file_exts)) {
              continue;
            }
            $processBuilder = new ProcessBuilder(['bin/phpmd', $file, 'text', $rules]);
            $processBuilder->setWorkingDirectory($rootPath);
            $process = $processBuilder->getProcess();
            $process->run();

            if (!$process->isSuccessful()) {
                $this->output->writeln($file);
                $this->output->writeln(sprintf('<error>%s</error>', trim($process->getOutput())));
                if ($succeed) {
                    $succeed = false;
                }
            }
        }

        return $succeed;
    }

    private function phpCpd($files) {
        $needle = $this->file_exts;
        $succeed = true;
        $rootPath = realpath(__DIR__ . '/../../');

        foreach ($files as $file) {
            $pathinfo = pathinfo($file);
            if (!isset($pathinfo['extension'])) {
                continue;
            }
            // Exclude features auto-generated files.
            if (strpos($pathinfo['filename'], '.features.') !== FALSE) {
              continue;
            }
            if (!in_array($pathinfo['extension'], $this->file_exts)) {
              continue;
            }
            $dirToCheck = array(
                $rootPath . '/sites/all/modules/features',
                $rootPath . '/sites/all/modules/custom'
            );
            foreach ($dirToCheck as $dir) {
                $processBuilder = new ProcessBuilder(['bin/phpcpd', $dir]);
                $processBuilder->setWorkingDirectory($rootPath);
                $process = $processBuilder->getProcess();
                $process->run();
                if (!$process->isSuccessful()) {
                    $this->output->writeln($file);
                    $this->output->writeln(sprintf('<error>%s</error>', trim($process->getOutput())));
                    if ($succeed) {
                        $succeed = false;
                    }
                }
            }
        }
        return $succeed;
    }


    private function codeStyleDrupal(array $files)
    {
        $succeed = true;
        $needle = $this->file_exts;
        foreach ($files as $file) {
            $pathinfo = pathinfo($file);
            if (!isset($pathinfo['extension'])) {
                continue;
            }
            // Exclude features auto-generated files.
            if (strpos($pathinfo['filename'], '.features.') !== FALSE) {
              continue;
            }
            if (!in_array($pathinfo['extension'], $this->file_exts)) {
              continue;
            }
            $processBuilder = new ProcessBuilder(array('bin/phpcs', '--standard=Drupal', $file));
            $processBuilder->setWorkingDirectory(__DIR__ . '/../../');
            $phpCsFixer = $processBuilder->getProcess();
            $phpCsFixer->run();
            if (!$phpCsFixer->isSuccessful()) {
                $this->output->writeln(sprintf('<error>%s</error>', trim($phpCsFixer->getOutput())));

                if ($succeed) {
                    $succeed = false;
                }
            }
        }
        return $succeed;
    }
}

$console = new CodeQualityTool();
$console->run();
